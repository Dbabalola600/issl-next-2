# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Service {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ServiceWhereUniqueInput {
  id: ID
  slug: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ServiceUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Team {
  id: ID!
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldOutput
  author: User
  editedOn: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input TeamWhereUniqueInput {
  id: ID
  slug: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  slug: StringFilter
  postion: StringFilter
  name: StringFilter
  content: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input TeamOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  postion: OrderDirection
  name: OrderDirection
  content: OrderDirection
  editedOn: OrderDirection
}

input TeamUpdateInput {
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldInput
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldInput
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Product {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input ProductUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Solution {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input SolutionWhereUniqueInput {
  id: ID
  slug: String
}

input SolutionWhereInput {
  AND: [SolutionWhereInput!]
  OR: [SolutionWhereInput!]
  NOT: [SolutionWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input SolutionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input SolutionUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input SolutionUpdateArgs {
  where: SolutionWhereUniqueInput!
  data: SolutionUpdateInput!
}

input SolutionCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type User {
  id: ID!
  email: String
  name: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  name: String
  password: String
  isAdmin: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(
    where: ServiceWhereUniqueInput!
    data: ServiceUpdateInput!
  ): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createSolution(data: SolutionCreateInput!): Solution
  createSolutions(data: [SolutionCreateInput!]!): [Solution]
  updateSolution(
    where: SolutionWhereUniqueInput!
    data: SolutionUpdateInput!
  ): Solution
  updateSolutions(data: [SolutionUpdateArgs!]!): [Solution]
  deleteSolution(where: SolutionWhereUniqueInput!): Solution
  deleteSolutions(where: [SolutionWhereUniqueInput!]!): [Solution]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    name: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  services(
    where: ServiceWhereInput! = {}
    orderBy: [ServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  solutions(
    where: SolutionWhereInput! = {}
    orderBy: [SolutionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Solution!]
  solution(where: SolutionWhereUniqueInput!): Solution
  solutionsCount(where: SolutionWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
